syntax = "proto3";

package domain;
import "api/grpc/proto/domain_enums.proto";

//import "google/protobuf/any.proto";
 
service Domain {
    // Database
    rpc List(ListRequest) returns (ListResponse) {}
    rpc ListHardware(ListHardwareRequest) returns (ListHardwareResponse) {}
    rpc ListHardwareDetail(ListHardwareDetailRequest) returns (ListHardwareDetailResponse) {}
    rpc Get(GetRequest) returns (GetResponse) {}
    rpc GetHardware(GetHardwareRequest) returns (GetHardwareResponse) {}
    rpc GetHardwareDetail(GetHardwareDetailRequest) returns (GetHardwareDetailResponse) {}
    rpc GetViewer(GetViewerRequest) returns (GetViewerResponse) {}
    
    // Engine only
    rpc UpdateHardware(UpdateHardwareRequest) returns (UpdateHardwareResponse) {}
    rpc Delete(DeleteRequest) returns (DeleteResponse) {}
    rpc Start(StartRequest) returns (StartResponse) {}
    rpc Stop(StopRequest) returns (StopResponse) {}
    rpc Pause(PauseRequest) returns (PauseResponse) {}
    rpc Resume(ResumeRequest) returns (ResumeResponse) {}
    rpc FromTemplate(FromTemplateRequest) returns (FromTemplateResponse) {}
    rpc FromMedia(FromMediaRequest) returns (FromMediaResponse) {}
}


///////////////////////////////////////////////////////
///// Dictionary messages
///////////////////////////////////////////////////////
message VmDiskDetail {
    int32 id = 1;
    string name = 2;
    string xml = 3;
    string ppath = 4;
    string rpath = 5;
    string filename = 6;
    Bus bus = 7;
    int32 size = 8;
    Format format = 9;
    int32 order = 10;
}

message VmDisk {
    int32 id = 1;
    string name = 2;
    string path = 3;
    Bus bus = 4;
    int32 size = 5;
    Format format = 6;
    int32 order = 7;
}

message VmSoundDetail {
    int32 id = 1;
    string name = 2;
    string xml = 3;
}

message VmSound {
    int32 id = 1;
    string name = 2;
}

message VmCpuDetail {
    int32 id = 1;
    string name = 2;
    string xml = 3;
    string match = 4;
    string fallback = 5;
    string model = 6;
    string check = 7;
}

message VmCpu {
    int32 id = 1;
    string name = 2;
}

message VmVcpuDetail {
    int32 id = 1;
    string name = 2;
    string xml = 3;
    int32 vcpus = 4;
}    

message VmVcpu {
    int32 id = 1;
    string name = 2;
    int32 vcpus = 4;
}

message VmMemoryDetail {
    int32 id = 1;
    string name = 2;
    string xml = 3;
    string unit = 4;
    int32 memory = 5;
    int32 maxmemory = 6;
    int32 currentmemory = 7;
}

message VmMemory {
    int32 id = 1;
    string name = 2;
    string unit = 4;
    int32 memory = 5;
}

message VmMediaDetail {
    int32 id = 1;
    string name = 2;
    string xml = 3;
    string ppath = 4;
    string rpath = 5;
    string filename = 6;
    string bus = 7;
    string format = 8;
    int32 order = 9;
}

message VmMedia {
    int32 id = 1;
    string name = 2;
    string filename = 3;
    string bus = 7;
    string format = 8;
    int32 order = 9;
}

message VmInterfaceDetail {
    int32 id = 1;
    string name = 2;
    string xml = 3;
    string source = 4;
    string model = 5;
    string mac = 6;
    int32 order = 7;
}

message VmInterface {
    int32 id = 1;
    string name = 2;
    string source = 3;
    string model = 4;
    string mac = 5;
    int32 order = 6;
}

message VmGraphicDetail {
    int32 id = 1;
    string name = 2;
    string xml = 3;
}

message VmGraphic {
    int32 id = 1;
    string name = 2;
}

message VmVideoDetail {
    int32 id = 1;
    string name = 2;
    string xml = 3;
}

message VmVideo {
    int32 id = 1;
    string name = 2;
}

message Viewer {
    string hostname = 1;
    string hostname_external = 2;
    int32 port_spice = 5;
    int32 port_spice_ssl = 6;
    int32 port_vnc = 7;
    int32 port_vnc_websocket = 8;
    string passwd = 9;
    string client_addr = 10;
    float client_since = 11;
}

message HardwareDetail {
    VmMemoryDetail memory = 4;
    VmVcpuDetail vcpu = 5;
    VmCpuDetail cpu = 6;
    repeated Boot boots = 7;
    repeated VmDiskDetail disks = 8;
    repeated VmMediaDetail medias = 9;
    repeated VmInterfaceDetail interfaces = 10;
    repeated VmGraphicDetail graphics = 11;
    repeated VmVideoDetail videos = 12;
    repeated VmSoundDetail sounds = 13;
    string xml = 14;
}

message Hardware {
    VmMemory memory = 4;
    VmVcpu vcpu = 5;
    VmCpu cpu = 6;
    repeated Boot boots = 7;
    repeated VmDisk disks = 8;
    repeated VmMedia medias = 9;
    repeated VmInterface interfaces = 10;
    repeated VmGraphic graphics = 11;
    repeated VmVideo videos = 12;
    repeated VmSound sounds = 13;
}

message Vm {
    int32 id = 1;
    string name = 2;
    State state = 3;
    repeated Action next_actions = 4;    
}

message VmHardware {
    int32 id = 1;
    string name = 2;
    State state = 3;
    repeated Action next_actions = 4;
    Hardware hardware = 5;
    
}

message VmHardwareDetail {
    int32 id = 1;
    string name = 2;
    State state = 3;
    repeated Action next_actions = 4;    
    HardwareDetail hardware = 5;
}

//////////////////////////////////////////////////////
/////////// ENDPOINT MESSAGES
//////////////////////////////////////////////////////

//// LIST
message ListRequest {}

message ListResponse {
    repeated Vm domains = 1;
}

message ListHardwareRequest {}

message ListHardwareResponse {
    repeated VmHardware domains = 1;
}

message ListHardwareDetailRequest {}

message ListHardwareDetailResponse {
    repeated VmHardwareDetail domains = 1;
}

//// GET
message GetRequest {
    string domain_id = 1;
}

message GetResponse {
    Vm domain = 1;
}

message GetHardwareRequest {
    string domain_id = 1;
}

message GetHardwareResponse {
    VmHardware domain = 1;
}

message GetHardwareDetailRequest {
    string domain_id = 1;
}

message GetHardwareDetailResponse {
    VmHardwareDetail hardware= 1;
}

//// Viewer
message GetViewerRequest {
    string domain_id = 1;
}

message GetViewerResponse {
    State state = 1;
    repeated Action next_actions = 2;
    Viewer viewer = 3;
}

///////////////////////////////////////////
/////////// Engine messages
///////////////////////////////////////////

message UpdateHardwareRequest {
    VmHardwareDetail hardware = 1;
}
    
message UpdateHardwareResponse {
    int32 id = 1;
    string name = 2;
    State state = 3;
    repeated Action next_actions = 4;
}


message FromTemplateRequest {
    string domain_id = 1;
    string template_id = 2;
    HardwareDetail hardware = 3;
}

message FromTemplateResponse {
    enum State {
        UNKNOWN = 0;
        STOPPED = 1;
        FAILED = 2;
    }
    State state = 1;
    repeated Action next_actions = 2;
}

message FromMediaRequest {
    string domain_id = 1;
    string virt_install_id = 2;
    HardwareDetail hardware = 3;
}

message FromMediaResponse {
    enum State {
        UNKNOWN = 0;
        STOPPED = 1;
        FAILED = 2;
    }
    State state = 1;
    repeated Action next_actions = 3;
}


message DeleteRequest {
    string domain_id = 1;
}

message DeleteResponse {
    enum State {
        UNKNOWN = 0;
        DELETED = 1;
        FAILED = 2;
    }
    State state = 1;
    repeated Action next_actions = 2;
}

message StartRequest {
    string domain_id = 1;
}

message StartResponse {
    enum State {
        UNKNOWN = 0;
        STOPPED = 1;
        STARTED = 2;
        PAUSED = 3;
        DELETED = 4;
        FAILED = 5;
    }
    State state = 1;
    Viewer viewer = 2;
    repeated Action next_actions = 3;
}

message StopRequest {
    string domain_id = 1;
}

message StopResponse {
    enum State {
        UNKNOWN = 0;
        STOPPED = 1;
        STARTED = 2;
        PAUSED = 3;
        DELETED = 4;
        FAILED = 5;
    }
    State state = 1;
    repeated Action next_actions = 2;
}

message PauseRequest {
    string domain_id = 1;
}

message PauseResponse {
    enum State {
        UNKNOWN = 0;
        STOPPED = 1;
        STARTED = 2;
        PAUSED = 3;
        DELETED = 4;
        FAILED = 5;
    }
    State state = 1;
    repeated Action next_actions = 2;
}

message ResumeRequest {
    string domain_id = 1;
}

message ResumeResponse {
    enum State {
        UNKNOWN = 0;
        STOPPED = 1;
        STARTED = 2;
        PAUSED = 3;
        DELETED = 4;
        FAILED = 5;
    }
    State state = 1;
    repeated Action next_actions = 2;
}
