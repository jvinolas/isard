syntax = "proto3";

package domain;
import "api/grpc/proto/domain_enums.proto";

//import "google/protobuf/any.proto";
 
service Domain {
    // Database
    rpc List(ListRequest) returns (ListResponse) {}
    rpc Get(GetRequest) returns (GetResponse) {}
    rpc State(GetStateRequest) returns (GetStateResponse) {}
    rpc Viewer(ViewerRequest) returns (ViewerResponse) {}
    rpc Hardware(HardwareRequest) returns (HardwareResponse) {}
    
    // Engine only
    rpc FromTemplate(FromTemplateRequest) returns (FromTemplateResponse) {}
    rpc FromMedia(FromMediaRequest) returns (FromMediaResponse) {}
    rpc HardwareUpdate(HardwareUpdateRequest) returns (HardwareUpdateResponse) {}
    rpc Delete(DeleteRequest) returns (DeleteResponse) {}
    rpc Start(StartRequest) returns (StartResponse) {}
    rpc Stop(StopRequest) returns (StopResponse) {}
    rpc Pause(PauseRequest) returns (PauseResponse) {}
    rpc Resume(ResumeRequest) returns (ResumeResponse) {}
    
    // Database & Engine (test domain before updating)
    // video add
    // video remove
    // video update
    // rpc BootUpdate(BootUpdateRequest) returns (BootUpdateResponse) {}
    // interface add
    // interface remove
    // interface update
    // graphics add
    // graphics remove
    // graphics update
    // cpu update
    // memory update
    // soudn add
    // sound remove
    // sound update
    // disk add
    // disk remove
    // disk update
    // media add
    // media remove
    // media update
}


///////////////////////////////////////////////////////
///// Dictionary messages
///////////////////////////////////////////////////////
message VmDiskDetail {
    int32 id = 1;
    string name = 2;
    string xml = 3;
    string ppath = 4;
    string rpath = 5;
    string filename = 6;
    Bus bus = 7;
    int32 size = 8;
    Format format = 9;
    int32 order = 10;
}

message VmDisk {
    int32 id = 1;
    string name = 2;
    string path = 3;
    Bus bus = 4;
    int32 size = 5;
    Format format = 6;
    int32 order = 7;
}

message VmSoundDetail {
    int32 id = 1;
    string name = 2;
    string xml = 3;
}

message VmSound {
    int32 id = 1;
    string name = 2;
}

message VmCpuDetail {
    int32 id = 1;
    string name = 2;
    string xml = 3;
    string match = 4;
    string fallback = 5;
    string model = 6;
    string check = 7;
}

message VmCpu {
    int32 id = 1;
    string name = 2;
}

message VmVcpuDetail {
    int32 id = 1;
    string name = 2;
    string xml = 3;
    int32 vcpus = 4;
}    

message VmVcpu {
    int32 id = 1;
    string name = 2;
    int32 vcpus = 4;
}

message VmMemoryDetail {
    int32 id = 1;
    string name = 2;
    string xml = 3;
    string unit = 4;
    int32 memory = 5;
    int32 maxmemory = 6;
    int32 currentmemory = 7;
}

message VmMemory {
    int32 id = 1;
    string name = 2;
    string unit = 4;
    int32 memory = 5;
}

message VmMediaDetail {
    int32 id = 1;
    string name = 2;
    string xml = 3;
    string ppath = 4;
    string rpath = 5;
    string filename = 6;
    string bus = 7;
    string format = 8;
    int32 order = 9;
}

message VmMedia {
    int32 id = 1;
    string name = 2;
    string filename = 3;
    string bus = 7;
    string format = 8;
    int32 order = 9;
}

message VmInterfaceDetail {
    int32 id = 1;
    string name = 2;
    string xml = 3;
    string source = 4;
    string model = 5;
    string mac = 6;
    int32 order = 7;
}

message VmInterface {
    int32 id = 1;
    string name = 2;
    string source = 3;
    string model = 4;
    string mac = 5;
    int32 order = 6;
}

message VmGraphicDetail {
    int32 id = 1;
    string name = 2;
    string xml = 3;
}

message VmGraphic {
    int32 id = 1;
    string name = 2;
}

message VmVideoDetail {
    int32 id = 1;
    string name = 2;
    string xml = 3;
}

message VmVideo {
    int32 id = 1;
    string name = 2;
}

message HardwareDetail {
    VmMemoryDetail memory = 4;
    VmVcpuDetail vcpu = 5;
    VmCpuDetail cpu = 6;
    repeated Boot boots = 7;
    repeated VmDiskDetail disks = 8;
    repeated VmMediaDetail medias = 9;
    repeated VmInterfaceDetail interfaces = 10;
    repeated VmGraphicDetail graphics = 11;
    repeated VmVideoDetail videos = 12;
    repeated VmSoundDetail sounds = 13;
    string xml = 14;
}

message Hardware {
    VmMemory memory = 4;
    VmVcpu vcpu = 5;
    VmCpu cpu = 6;
    repeated Boot boots = 7;
    repeated VmDisk disks = 8;
    repeated VmMedia medias = 9;
    repeated VmInterface interfaces = 10;
    repeated VmGraphic graphics = 11;
    repeated VmVideo videos = 12;
    repeated VmSound sounds = 13;
}

message Vm {
    int32 id = 1;
    string name = 2;
    State state = 3;
	repeated Action next_actions = 4;    
}

message VmHardware {
    int32 id = 1;
    string name = 2;
    State state = 3;
	repeated Action next_actions = 4;
	Hardware hardware = 5;
	
}

message VmHardwareDetail {
    int32 id = 1;
    string name = 2;
    State state = 3;
	repeated Action next_actions = 4;    
	HardwareDetail hardware = 5;
}

//////////////////////////////////////////////////////
/////////// ENDPOINT MESSAGES
//////////////////////////////////////////////////////

message ListRequest {}

message ListResponse {
    repeated Vm domains = 1;
}


message HardwareRequest {
    string domain_id = 1;
    
}
    
message HardwareResponse {
    enum State {
        UNKNOWN = 0;
        STOPPED = 1;
        FAILED = 2;
    }
    State state = 1;
    repeated Action next_actions = 2;
    Hardware hardware = 3;
}

message HardwareUpdateRequest {
    Hardware hardware = 1;
}
    
message HardwareUpdateResponse {
    Hardware hardware = 1;
}



message ListStateRequest {}

message DomainState {
    enum State {
        UNKNOWN = 0;
        STOPPED = 1;
        STARTED = 2;
        PAUSED = 3;
        DELETED = 4;
        FAILED = 5;
    }
    string Domain_id = 1;
    State state = 2;
    repeated Action next_actions = 3;
}

message ListStateResponse {
    repeated DomainState Domains = 1;
}

message GetRequest {
    string Domain_id = 1;
}

message GetResponse {
    enum State {
        UNKNOWN = 0;
        STOPPED = 1;
        STARTED = 2;
        PAUSED = 3;
        DELETED = 4;
        FAILED = 5;
    }
    Hardware hardware = 1;
    State state = 2;
    repeated Action next_actions = 3;
}

message GetStateRequest {
    string Domain_id = 1;
}

message GetStateResponse {
    enum State {
        UNKNOWN = 0;
        STOPPED = 1;
        STARTED = 2;
        PAUSED = 3;
        DELETED = 4;
        FAILED = 5;
    }
    State state = 1;
    repeated Action next_actions = 3;
}

message FromTemplateRequest {
    string Domain_id = 1;
    string template_id = 2;
    Hardware hardware = 3;
}

message FromTemplateResponse {
    enum State {
        UNKNOWN = 0;
        STOPPED = 1;
        FAILED = 2;
    }

    State state = 1;
    repeated Action next_actions = 2;
}

message FromMediaRequest {
    string Domain_id = 1;
    string virt_install_id = 2;
    Hardware hardware = 3;
}

message FromMediaResponse {
    enum State {
        UNKNOWN = 0;
        STOPPED = 1;
        FAILED = 2;
    }
    State state = 1;
    repeated Action next_actions = 3;
}


message DeleteRequest {
    string Domain_id = 1;
}

message DeleteResponse {
    enum State {
        UNKNOWN = 0;
        DELETED = 1;
        FAILED = 2;
    }
    State state = 1;
    repeated Action next_actions = 2;
}

message StartRequest {
    string Domain_id = 1;
}

message StartResponse {
    enum State {
        UNKNOWN = 0;
        STOPPED = 1;
        STARTED = 2;
        PAUSED = 3;
        DELETED = 4;
        FAILED = 5;
    }
    State state = 1;
    Viewer viewer = 2;
    repeated Action next_actions = 3;
}

message StopRequest {
    string domain_id = 1;
}

message StopResponse {
    enum State {
        UNKNOWN = 0;
        STOPPED = 1;
        STARTED = 2;
        PAUSED = 3;
        DELETED = 4;
        FAILED = 5;
    }
    State state = 1;
    repeated Action next_actions = 2;
}

message PauseRequest {
    string domain_id = 1;
}

message PauseResponse {
    enum State {
        UNKNOWN = 0;
        STOPPED = 1;
        STARTED = 2;
        PAUSED = 3;
        DELETED = 4;
        FAILED = 5;
    }
    State state = 1;
    repeated Action next_actions = 2;
}

message ResumeRequest {
    string domain_id = 1;
}

message ResumeResponse {
    enum State {
        UNKNOWN = 0;
        STOPPED = 1;
        STARTED = 2;
        PAUSED = 3;
        DELETED = 4;
        FAILED = 5;
    }
    State state = 1;
    repeated Action next_actions = 2;
}
message ViewerRequest {
    string Domain_id = 1;
}

message ViewerResponse {
    Viewer viewer = 1;
    repeated Action next_actions = 2;
}

message VideoListRequest {
}

message Video {
    string id = 1;
    string model = 2;
    int32 heads = 3;
    int32 ram = 4;
    int32 vram = 5;
}
    
message VideoListResponse {
    repeated Video videos = 1;
}



message BootListRequest {
    string domain_name = 1;
}

message BootListResponse {
    repeated Boot boots = 1;
}

message BootUpdateRequest {
    string domain_name = 1;
    repeated Boot boots = 2;
}

message BootUpdateResponse {
    repeated Boot boots = 1;
}

message InterfaceListRequest {
}

message Interface {
    string id = 1;
    string ifname = 2;
    string model = 3;
    string net = 4;
    string type = 5;
}
    
message InterfaceListResponse {
    repeated Interface interfaces = 1;
}

message Viewer {
    string hostname = 1;
    string hostname_external = 2;
    int32 port_spice = 5;
    int32 port_spice_ssl = 6;
    int32 port_vnc = 7;
    int32 port_vnc_websocket = 8;
    string passwd = 9;
    string client_addr = 10;
    float client_since = 11;
}


